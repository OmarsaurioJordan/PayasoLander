<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = 50;
px = 0;
py = 0;
vx = 0;
vy = 0;
ax = 0;
ay = 0;
ag = 0;
vg = 0;
pg = 0;
cp = 0;
cg = 0;

reloj_anima = 0;
paso_anima = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///reubicar payaso
if m_todolado
{
    if mouse_check_button_pressed(mb_left)
    {
        px = mouse_x - room_width * 0.5;
        py = mouse_y - 710;
    }
    else if mouse_check_button_pressed(mb_right)
    {
        px = mouse_x - room_width * 0.5;
        py = mouse_y - 710;
        vx = random_range(-m_vxy, m_vxy) * 0.8;
        vy = random_range(-m_vxy, m_vxy) * 0.8;
        pg = random_range(-m_pg, m_pg);
        vg = random_range(-m_vg, m_vg);
        if o_juego.estadoviento != "desactivado"
        {
            o_juego.vv = random_range(-m_vv, m_vv);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///vida del payaso
if !o_juego.pausa
{
    if o_juego.manual
    {
        //definido por usuario
        if keyboard_check(vk_space) or keyboard_check(vk_up) or keyboard_check(ord("W"))
        {
            cp = 1;
        }
        else
        {
            cp = 0;
        }
        if keyboard_check(vk_right) or keyboard_check(ord("D")) or keyboard_check(ord("X"))
        {
            cg = -1;
        }
        else if keyboard_check(vk_left) or keyboard_check(ord("A")) or keyboard_check(ord("Z"))
        {
            cg = 1;
        }
        else
        {
            cg = 0;
        }
    }
    else
    {
        //IA MLP
        if !m_dmnn
        {
            var i, j, k, s1, s2;
            var xxx = s_entradas_compactas();
            
            //pesos sinapticos capa oculta
            //m_ocult neuronas, m_xin entradas
            for (j = 0; j &lt; m_ocult; j++)
            {
                s1[j] = o_red.w_oc[j, m_xin];
                for (i = 0; i &lt; m_xin; i++)
                {
                    s1[j] += o_red.w_oc[j, i] * xxx[i];
                }
                s1[j] = 2 / (1 + exp(-s1[j])) - 1;
            }
            
            //pesos sinapticos capa de salida
            //2 neuronas, m_ocult
            for (k = 0; k &lt; 2; k++)
            {
                s2[k] = o_red.w_sa[k, m_ocult];
                for (j = 0; j &lt; m_ocult; j++)
                {
                    s2[k] += o_red.w_sa[k, j] * s1[j];
                }
                s2[k] = 2 / (1 + exp(-s2[k])) - 1;
            }
            
            //adecuacion de salida
            if s2[0] &gt; 0
            {
                cp = 1;
            }
            else
            {
                cp = 0;
            }
            if s2[1] &gt; 0.693
            {
                cg = 1;
            }
            else if s2[1] &lt; -0.693
            {
                cg = -1;
            }
            else
            {
                cg = 0;
            }
        }
        //IA DMNN
        else
        {
            var xxx = s_entradas_compactas();
            
            if o_dmnn.normaN == -1 //Z-Score
            {
                for (var i = 0; i &lt; m_xin; i++)
                {
                    xxx[i] = (xxx[i] - o_dmnn.normaH[i]) / o_dmnn.normaL[i];
                }
            }
            else if o_dmnn.normaN &gt; 0 //Min-Max
            {
                for (var i = 0; i &lt; m_xin; i++)
                {
                    xxx[i] = 2 * ((xxx[i] - o_dmnn.normaL[i]) /
                        (o_dmnn.normaH[i] - o_dmnn.normaL[i])) - 1;
                }
            }
            
            var wk, ws, Z0, Z1, Z2, Z3, Z4, Z5;
            Z0 = -1000000;
            for (var k = 0; k &lt; o_dmnn.Km[0] * m_xin; k += m_xin)
            {
                ws = 1000000;
                for (var n = 0; n &lt; m_xin; n++)
                {
                    wk = min(o_dmnn.WH0[k + n] - xxx[n],
                        xxx[n] - o_dmnn.WL0[k + n]);
                    if wk &lt; ws
                    {
                        ws = wk;
                    }
                }
                if ws &gt; Z0
                {
                    Z0 = ws;
                }
            }
            Z1 = -1000000;
            for (var k = 0; k &lt; o_dmnn.Km[1] * m_xin; k += m_xin)
            {
                ws = 1000000;
                for (var n = 0; n &lt; m_xin; n++)
                {
                    wk = min(o_dmnn.WH1[k + n] - xxx[n],
                        xxx[n] - o_dmnn.WL1[k + n]);
                    if wk &lt; ws
                    {
                        ws = wk;
                    }
                }
                if ws &gt; Z1
                {
                    Z1 = ws;
                }
            }
            Z2 = -1000000;
            for (var k = 0; k &lt; o_dmnn.Km[2] * m_xin; k += m_xin)
            {
                ws = 1000000;
                for (var n = 0; n &lt; m_xin; n++)
                {
                    wk = min(o_dmnn.WH2[k + n] - xxx[n],
                        xxx[n] - o_dmnn.WL2[k + n]);
                    if wk &lt; ws
                    {
                        ws = wk;
                    }
                }
                if ws &gt; Z2
                {
                    Z2 = ws;
                }
            }
            Z3 = -1000000;
            for (var k = 0; k &lt; o_dmnn.Km[3] * m_xin; k += m_xin)
            {
                ws = 1000000;
                for (var n = 0; n &lt; m_xin; n++)
                {
                    wk = min(o_dmnn.WH3[k + n] - xxx[n],
                        xxx[n] - o_dmnn.WL3[k + n]);
                    if wk &lt; ws
                    {
                        ws = wk;
                    }
                }
                if ws &gt; Z3
                {
                    Z3 = ws;
                }
            }
            Z4 = -1000000;
            for (var k = 0; k &lt; o_dmnn.Km[4] * m_xin; k += m_xin)
            {
                ws = 1000000;
                for (var n = 0; n &lt; m_xin; n++)
                {
                    wk = min(o_dmnn.WH4[k + n] - xxx[n],
                        xxx[n] - o_dmnn.WL4[k + n]);
                    if wk &lt; ws
                    {
                        ws = wk;
                    }
                }
                if ws &gt; Z4
                {
                    Z4 = ws;
                }
            }
            Z5 = -1000000;
            for (var k = 0; k &lt; o_dmnn.Km[5] * m_xin; k += m_xin)
            {
                ws = 1000000;
                for (var n = 0; n &lt; m_xin; n++)
                {
                    wk = min(o_dmnn.WH5[k + n] - xxx[n],
                        xxx[n] - o_dmnn.WL5[k + n]);
                    if wk &lt; ws
                    {
                        ws = wk;
                    }
                }
                if ws &gt; Z5
                {
                    Z5 = ws;
                }
            }
            if Z0 &gt; Z1 and Z0 &gt; Z2 and Z0 &gt; Z3 and Z0 &gt; Z4 and Z0 &gt; Z5
            {
                cp = 0;
                cg = -1;
            }
            else if Z1 &gt; Z0 and Z1 &gt; Z2 and Z1 &gt; Z3 and Z1 &gt; Z4 and Z1 &gt; Z5
            {
                cp = 0;
                cg = 0;
            }
            else if Z2 &gt; Z1 and Z2 &gt; Z0 and Z2 &gt; Z3 and Z2 &gt; Z4 and Z2 &gt; Z5
            {
                cp = 0;
                cg = 1;
            }else if Z3 &gt; Z1 and Z3 &gt; Z2 and Z3 &gt; Z0 and Z3 &gt; Z4 and Z3 &gt; Z5
            {
                cp = 1;
                cg = -1;
            }else if Z4 &gt; Z1 and Z4 &gt; Z2 and Z4 &gt; Z3 and Z4 &gt; Z0 and Z4 &gt; Z5
            {
                cp = 1;
                cg = 0;
            }
            else
            {
                cp = 1;
                cg = 1;
            }
        }
    }
    
    //limitar si no energia
    if o_juego.energia == 0
    {
        cp = 0;
    }
    
    //animacion sombrilla
    if cp == 1 or paso_anima &gt; 1
    {
        reloj_anima -= o_juego.Dt;
        if reloj_anima &lt;= 0
        {
            reloj_anima = m_anima;
            if paso_anima == 3
            {
                paso_anima = 0;
            }
            else
            {
                paso_anima += 1;
                if paso_anima == 2
                {
                    audio_play_sound(a_impulso, 1, false);
                }
            }
        }
    }
    else if paso_anima == 1
    {
        reloj_anima -= o_juego.Dt;
        if reloj_anima &lt;= 0
        {
            reloj_anima = 0;
            paso_anima = 0;
        }
    }
    
    //fisicas
    ag = cg * m_giro;
    vg = clamp(vg * m_fg + ag * o_juego.Dt, -m_vg, m_vg);
    pg = clamp(pg + vg * o_juego.Dt, -m_pg, m_pg);
    
    ax = -dsin(pg) * cp * m_impulso;
    ay = m_grav - dcos(pg) * cp * m_impulso;
    
    vx = clamp(vx * m_fv + o_juego.vv * 0.025 + ax * o_juego.Dt, -m_vxy, m_vxy);
    vy = clamp(vy * m_fv + ay * o_juego.Dt, -m_vxy, m_vxy);
    
    px = clamp(px + vx * o_juego.Dt, -m_px, m_px);
    py = clamp(py + vy * o_juego.Dt, -m_py, 0);
    
    x = room_width * 0.5 + px;
    y = 710 + py;
    
    //verificacion victoria o muerte
    if px == m_px or px == -m_px or py == -m_py
    {
        audio_play_sound(a_sefue, 4, false);
        audio_play_sound(a_ahhh, 4, false);
        instance_create(x, y, o_sefue);
        o_cuentawins.lose++;
        o_cuentawins.alarm[0] = room_speed * 5;
        instance_destroy();
    }
    else if abs(px) &gt; m_radio
    {
        if py == 0
        {
            audio_play_sound(a_chapuzon, 4, false);
            audio_play_sound(a_ahhh, 4, false);
            audio_play_sound(a_nadando, 1, true);
            var aux = instance_create(x, y, o_final);
            aux.tipo = 6;
            if abs(px) &gt; m_radio * 3
            {
                o_cuentawins.lose++;
            }
            else
            {
                o_cuentawins.casi++;
            }
            o_cuentawins.alarm[0] = room_speed * 5;
            instance_destroy();
        }
    }
    else if abs(py) &lt;= m_radio * 0.5
    {
        if vy &gt;= m_golpev
        {
            audio_play_sound(a_golpe, 4, false);
            audio_play_sound(a_gritos, 4, false);
            if pg &lt; -m_caeg
            {
                var aux = instance_create(x, y, o_final);
                aux.tipo = 1;
            }
            else if pg &gt; m_caeg
            {
                var aux = instance_create(x, y, o_final);
                aux.tipo = 3;
            }
            else
            {
                var aux = instance_create(x, y, o_final);
                aux.tipo = 4;
            }
            if vy &gt;= m_golpev * 1.5
            {
                o_cuentawins.lose++;
            }
            else
            {
                o_cuentawins.casi++;
            }
            o_cuentawins.alarm[0] = room_speed * 5;
            instance_destroy();
        }
        else if abs(vx) &lt;= m_golpev * 0.75
        {
            if pg &lt; -m_caeg
            {
                audio_play_sound(a_ahhh, 4, false);
                audio_play_sound(a_nooo, 4, false);
                var aux = instance_create(x, y, o_final);
                aux.tipo = 0;
                o_cuentawins.casi++;
            }
            else if pg &gt; m_caeg
            {
                audio_play_sound(a_ahhh, 4, false);
                audio_play_sound(a_nooo, 4, false);
                var aux = instance_create(x, y, o_final);
                aux.tipo = 2;
                o_cuentawins.casi++;
            }
            else
            {
                audio_play_sound(a_win1, 5, false);
                audio_play_sound(a_win2, 5, false);
                var aux = instance_create(x, y, o_final);
                aux.tipo = 5;
                o_cuentawins.wins++;
                
                //guardar patrones
                if o_juego.tomadatos
                {
                    s_guarda_patrones();
                }
            }
            o_cuentawins.alarm[0] = room_speed * 5;
            instance_destroy();
            exit;
        }
    }
    
    //mantener cierto numero de estadisticas
    if o_cuentawins.alarm[0] != -1
    {
        if o_cuentawins.wins + o_cuentawins.casi + o_cuentawins.lose == o_juego.num_est
        {
            o_cuentawins.total = "W/C/L///T: " + string(o_cuentawins.wins) +
                " / " + string(o_cuentawins.casi) + " / " + string(o_cuentawins.lose) + " /// " +
                string(o_cuentawins.wins + o_cuentawins.casi + o_cuentawins.lose)
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(d_vuela, paso_anima, x, y, 1, 1, 90 + pg, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
