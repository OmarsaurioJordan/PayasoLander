<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = 100;

ini_open("configuracion.ini");
    
    pausa = true;
    
    //estadoviento: cambiante, desactivado, estable
    estadoviento = ini_read_string("config", "estadoviento", "cambiante");
    
    num_est = real(ini_read_string("config", "muestras_plays", "30"));
    ini_write_string("config", "muestras_plays", string(num_est));
    
    if ini_read_string("config", "manual", "1") == "0"
    {
        manual = false;
    }
    else
    {
        manual = true;
    }
    
    if ini_read_string("config", "tomadatos", "1") == "0"
    {
        tomadatos = false;
    }
    else
    {
        tomadatos = true;
    }
    
    if ini_read_string("config", "debug", "0") == "0"
    {
        debug = false;
    }
    else
    {
        debug = true;
    }
    
    m_muestreo = ini_read_real("config", "muestreo", 0.3);
    
    if ini_read_string("config", "fullscreen", "0") == "0"
    {
        window_set_fullscreen(false);
    }
    else
    {
        window_set_fullscreen(true);
    }
    
ini_close();

energia = 100;

Dt = 0;

reloj_viento = 0;
av = 0;
if estadoviento != "desactivado"
{
    vv = -m_vv + random(2 * m_vv);
}
else
{
    vv = 0;
}

reloj_registro = m_muestreo;
log_debug = "Ax =#Ay =##Vx =#Vy =##Px =#Py =##Ag =#Vg =#Pg =##Av =#Vv =##Energia =";

reloj_anima = 0;
paso_anima = 0;
paso_pausa = 0;

posis = 0;
patron[0, 0] = 0;
salida[0, 0] = 0;

//para patrones por no muestreo
viejos = "";

//crear espectadores
esp_xy[0, 0] = 598; esp_xy[0, 1] = 459;
esp_xy[1, 0] = 642; esp_xy[1, 1] = 462;
esp_xy[2, 0] = 697; esp_xy[2, 1] = 457;
esp_xy[3, 0] = 753; esp_xy[3, 1] = 464;
esp_xy[4, 0] = 794; esp_xy[4, 1] = 470;
esp_xy[5, 0] = 771; esp_xy[5, 1] = 484;
esp_xy[6, 0] = 725; esp_xy[6, 1] = 489;
esp_xy[7, 0] = 674; esp_xy[7, 1] = 481;
esp_xy[8, 0] = 617; esp_xy[8, 1] = 491;
esp_xy[9, 0] = 582; esp_xy[9, 1] = 506;
esp_xy[10, 0] = 659; esp_xy[10, 1] = 513;
esp_xy[11, 0] = 711; esp_xy[11, 1] = 524;
esp_xy[12, 0] = 759; esp_xy[12, 1] = 519;
esp_xy[13, 0] = 802; esp_xy[13, 1] = 531;
esp_xy[14, 0] = 570; esp_xy[14, 1] = 550;
esp_xy[15, 0] = 623; esp_xy[15, 1] = 550;
esp_xy[16, 0] = 679; esp_xy[16, 1] = 558;
esp_xy[17, 0] = 747; esp_xy[17, 1] = 553;

for (var n = 0; n &lt; 18; n++)
{
    esp_xy[n, 2] = irandom(3);
}

//crear particulas que mostraran velocidad del viento
repeat 69
{
    instance_create(random(room_width), random(room_height - 64), o_vapor);
}

if !file_exists("dmnn.txt") and m_dmnn
{
    m_dmnn = false;
}

if m_dmnn
{
    instance_create(0, 0, o_dmnn);
    ws = s_pesos(o_dmnn, false);
}
else
{
    instance_create(0, 0, o_red);
    s_abre_red(o_red);
    ws = s_pesos(o_red, true);
}

var aux = instance_create(0, 0, o_payaso);
if m_todolado
{
    aux.px = -500 + random(1000);
    aux.py = -(50 + random(650));
}
else
{
    aux.px = -400 + random(800);
    aux.py = -550;
}
aux.x = room_width * 0.5 + aux.px;
aux.y = 710 + aux.py;

audio_stop_all();
audio_play_sound(a_musica, 1, true);

alarm[0] = room_speed * 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !manual
{
    pausa = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///teclas comandos
if keyboard_check_pressed(vk_enter)
{
    manual = !manual;
    audio_play_sound(a_boton, 5, false);
}
else if keyboard_check_pressed(vk_tab)
{
    tomadatos = !tomadatos;
    audio_play_sound(a_boton, 5, false);
}
else if keyboard_check_pressed(vk_f10)
{
    debug = !debug;
    audio_play_sound(a_boton, 5, false);
}
else if keyboard_check_pressed(vk_delete)
{
    audio_play_sound(a_boton, 5, false);
    switch(estadoviento)
    {
        case "cambiante":
            estadoviento = "desactivado";
            vv = 0;
            break;
        case "desactivado":
            estadoviento = "estable";
            vv = -m_vv + random(2 * m_vv);
            break;
        case "estable":
            estadoviento = "cambiante";
            break;
    }
}
else if keyboard_check_pressed(ord("P"))
{
    pausa = !pausa;
    if !pausa
    {
        audio_play_sound(a_boton, 5, false);
    }
}
else if keyboard_check_pressed(vk_f4)
{
    window_set_fullscreen(!window_get_fullscreen());
}
else if keyboard_check_pressed(vk_backspace)
{
    s_guarda_estados_juego();
    room_restart();
}
else if keyboard_check_pressed(vk_escape)
{
    s_guarda_estados_juego();
    room_goto(w_menu);
}
else if keyboard_check_pressed(ord('T')) and tomadatos
    {
        s_guarda_patrones();
        s_guarda_estados_juego();
        room_restart();
    }
else if keyboard_check_pressed(vk_anykey)
{
    if pausa
    {
        pausa = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///cambios entorno
Dt = delta_time * 0.000001; //microsegundos entre game steps

if !pausa
{
    if estadoviento == "cambiante"
    {
        reloj_viento -= Dt;
        if reloj_viento &lt;= 0
        {
            reloj_viento = 1 + random(5);
            av = -m_av + random(2 * m_av);
        }
        vv = clamp(vv + av * Dt, -m_vv, m_vv);
    }
    if irandom(8) == 0
    {
        if !audio_is_playing(a_viento) and abs(vv) &gt; m_vv * 0.3
        {
            audio_play_sound(a_viento, 1, false);
        }
    }
    
    reloj_anima -= Dt;
    if reloj_anima &lt;= 0
    {
        reloj_anima = m_anima;
        if paso_anima == 3
        {
            paso_anima = 0;
        }
        else
        {
            paso_anima += 1;
        }
    }
    
    if instance_exists(o_payaso)
    {
        if o_payaso.cp == 1
        {
            var chequeo_anterior = energia;
            energia = clamp(energia - m_ve * Dt, 0, 100);
            if energia == 0 and chequeo_anterior &gt; 0
            {
                audio_play_sound(a_beep, 1, true);
            }
        }
        
        log_debug = "Ax = " + string(o_payaso.ax) + "#Ay = " + string(-o_payaso.ay) +
            "##Vx = " + string(o_payaso.vx) + "#Vy = " + string(-o_payaso.vy) +
            "##Px = " + string(o_payaso.px) + "#Py = " + string(-o_payaso.py) +
            "##Ag = " + string(o_payaso.ag) + "#Vg = " + string(o_payaso.vg) +
            "#Pg = " + string(o_payaso.pg) +
            "##Av = " + string(av) + "#Vv = " + string(vv) +
            "##Energia = " + string(energia);
    }
    else
    {
        log_debug = string_copy(log_debug, 1, string_pos("Av = ", log_debug) - 1);
        log_debug += "Av = " + string(av) + "#Vv = " + string(vv) +
            "##Energia = " + string(energia);
    }
    
    if tomadatos and instance_exists(o_payaso)
    {
        var tomelos = false;
        var v = string(o_payaso.cp) + string(o_payaso.cg);
        if v != viejos
        {
            viejos = v;
            reloj_registro = m_muestreo;
            if random(1) &lt;= 0.1 or manual
            {
                tomelos = true;
            }
        }
        else
        {
            reloj_registro -= Dt;
            if reloj_registro &lt;= 0
            {
                reloj_registro = m_muestreo;
                tomelos = true;
            }
        }
        
        if tomelos
        {
            var xxx = s_entradas_compactas();
            for (var i = 0; i &lt; m_xin; i++)
            {
                patron[posis, i] = xxx[i];
            }
            if o_payaso.cp == 1
            {
                salida[posis, 0] = 1;
            }
            else
            {
                salida[posis, 0] = -1;
            }
            salida[posis, 1] = o_payaso.cg;
            
            
            posis += 1;
            if irandom(48) == 0
            {
                audio_play_sound(a_camara, 1, false);
            }
        }
    }
}
else
{
    reloj_anima -= Dt;
    if reloj_anima &lt;= 0
    {
        reloj_anima = m_anima;
        if paso_pausa == 3
        {
            paso_pausa = 0;
        }
        else
        {
            paso_pausa += 1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//sol y luna
draw_sprite(d_sol_luna, 0, 0, 0);
draw_sprite(d_sol_luna, 1, room_width - 192, 0);

//sefue
if instance_exists(o_sefue)
{
    draw_sprite_ext(d_sefue, 0, o_sefue.x, o_sefue.y,
        1, 1, o_sefue.direction, c_white, 1);
}
else if instance_exists(o_explosion)
{
    draw_sprite_ext(d_explosion, o_explosion.paso_anima,
        o_explosion.x, o_explosion.y, 1, 1, 0, c_white, 1);
}

//tierra y agua
draw_sprite_ext(d_suelo, 0, 0, room_height, 3.42, 3.42, 0, c_white, 1);

//graderia atras
draw_sprite(d_graderia, 0, 700, 600);

//espectadores
var aux;
for (var n = 0; n &lt; 18; n++)
{
    aux = paso_anima + esp_xy[n, 2];
    if aux &gt; 3
    {
        aux -= 4;
    }
    switch aux
    {
        case 0:
        case 2:
            draw_sprite(d_espectador, 0, esp_xy[n, 0], esp_xy[n, 1] - 5);
            break;
        case 1:
            draw_sprite(d_espectador, 0, esp_xy[n, 0], esp_xy[n, 1] - 10);
            break;
        case 3:
            draw_sprite(d_espectador, 0, esp_xy[n, 0], esp_xy[n, 1]);
            break;
    }
}

//graderia frente
draw_sprite(d_graderia, 1, 700, 600);

//otras cosas al frente y sobre la graderia
draw_sprite(d_pizzarra, 0, 140, 600);
draw_sprite(d_reiniciar, 0, 450, 590);

draw_sprite(d_tomadatos, 1 + tomadatos * 4 + paso_anima, 775, 270);
draw_sprite(d_tomadatos, 0, 775, 270);

draw_sprite(d_debug, 1 + debug * 4 + paso_anima, 575, 277);
draw_sprite(d_debug, 0, 575, 277);

if pausa
{
    draw_sprite(d_pausa, 5 + paso_pausa, 940, 630);
}
else
{
    draw_sprite(d_pausa, 1 + paso_anima, 940, 630);
}
draw_sprite(d_pausa, 0, 940, 630);

draw_sprite(d_manual, 1 + manual * 4 + paso_anima, 260, 630);
draw_sprite(d_manual, 0, 260, 630);

switch estadoviento
{
    case "cambiante":
        draw_sprite(d_estadoviento, 1, 380, 580);
        break;
    case "desactivado":
        draw_sprite(d_estadoviento, 2, 380, 580);
        break;
    case "estable":
        draw_sprite(d_estadoviento, 3, 380, 580);
        break;
}
draw_sprite(d_estadoviento, 0, 380, 580);

if energia == 0
{
    draw_sprite(d_energia, 2 + paso_anima, 700, 590);
}
draw_sprite(d_energia, 0, 700, 590);
draw_sprite_ext(d_energia, 1, 700, 590, 1, 1, 90 + energia * 3.6, c_white, 1);

//plataforma aterrizaje
draw_sprite(d_plataforma, 0, room_width * 0.5, 710);

//debug mode
if debug
{
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_text_transformed_colour(220, 96, log_debug,
        0.8, 0.8, 0, c_black, c_black, c_black, c_black, 0.8);
}

//dibujar numero de pesos
draw_set_valign(fa_bottom);
draw_set_halign(fa_right);
draw_text_transformed_colour(room_width, room_height, "W: " + string(ws),
    0.7, 0.7, 0, c_dkgray, c_dkgray, c_dkgray, c_dkgray, 1);

//dibujar numero de wins
draw_set_valign(fa_bottom);
draw_set_halign(fa_left);
draw_text_transformed_colour(0, room_height, "(T) forzar acumular patrones y reiniciar" +
    "#(0) pantallazo#W/C/L/T: " + string(o_cuentawins.wins) +
    " / " + string(o_cuentawins.casi) + " / " + string(o_cuentawins.lose) + " / " +
    string(o_cuentawins.wins + o_cuentawins.casi + o_cuentawins.lose) + "#" +
    o_cuentawins.total,
    0.7, 0.7, 0, c_dkgray, c_dkgray, c_dkgray, c_dkgray, 1);

draw_sprite(d_cruz, 0, mouse_x, mouse_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
