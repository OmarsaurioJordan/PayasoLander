<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = 200;
manejo = s_manejador();

instance_create(x + 220, y, o_parar_entreno);
instance_create(x, y + 40, o_abre_red);
instance_create(x + 220, y + 40, o_guarda_red);
instance_create(x, y + 80, o_reinicia_redes);
instance_create(x + 220, y + 80, o_resetea_iteraciones);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if mouse_check_button_pressed(mb_left)
{
    if mouse_x &gt; x - 104 and mouse_y &gt; y - 16 and
        mouse_x &lt; x + 104 and mouse_y &lt; y + 16 and
        !manejo.entrenando
    {
        audio_play_sound(a_boton, 5, false);
        switch room
        {
            case w_gradiente:
                if o_gradiente.error &gt; o_deseado.numerico or o_gradiente.error == -1
                {
                    o_gradiente.contador = 0;
                    o_gradiente.entrenando = true;
                }
                break;
            
            case w_genetico:
                if o_genetico.error &gt; o_deseado.numerico or o_genetico.error == -1
                {
                    var aux1 = array_length_1d(o_genetico.ind);
                    var aux2 = o_pobla.numerico - aux1;
                    
                    if aux2 &gt; 0
                    {
                        for (var n = aux1; n &lt; o_pobla.numerico; n++)
                        {
                            o_genetico.ind[n] = instance_create(0, 0, o_red);
                            s_escalar_red(o_genetico.ind[n], 2);
                        }
                    }
                    else if aux2 &lt; 0
                    {
                        var aux_ind;
                        for (var n = 0; n &lt; o_pobla.numerico; n++)
                        {
                            aux_ind[n] = o_genetico.ind[n];
                        }
                        for (var n = o_pobla.numerico; n &lt; aux1; n++)
                        {
                            with o_genetico.ind[n]
                            {
                                instance_destroy();
                            }
                        }
                        o_genetico.ind = aux_ind;
                    }
                    
                    o_genetico.contador = 0;
                    o_genetico.entrenando = true;
                }
                break;
            
            case w_particulas:
                if o_particulas.error &gt; o_deseado.numerico or o_particulas.error == -1
                {
                    var aux1 = array_length_1d(o_particulas.pp);
                    var aux2 = o_partis.numerico - aux1;
                    var aux;
                    
                    if aux2 &gt; 0
                    {
                        for (var n = aux1; n &lt; o_partis.numerico; n++)
                        {
                            o_particulas.pp[n] = instance_create(0, 0, o_red);
                            s_escalar_red(o_particulas.pp[n], m_w * m_vini);
                            aux = instance_create(0, 0, o_pp);
                            aux.moter = o_particulas.pp[n];
                            o_particulas.pv[n] = instance_create(0, 0, o_red);
                            s_escalar_red(o_particulas.pv[n], o_vf.numerico * m_vini);
                            o_particulas.pb[n] = instance_create(0, 0, o_red);
                            s_igualar_redes(o_particulas.pb[n], o_particulas.pp[n]);
                        }
                    }
                    else if aux2 &lt; 0
                    {
                        var aux_pp, aux_pv, aux_pb;
                        for (var n = 0; n &lt; o_partis.numerico; n++)
                        {
                            aux_pp[n] = o_particulas.pp[n];
                            aux_pv[n] = o_particulas.pv[n];
                            aux_pb[n] = o_particulas.pb[n];
                        }
                        for (var n = o_partis.numerico; n &lt; aux1; n++)
                        {
                            with o_particulas.pp[n]
                            {
                                instance_destroy();
                            }
                            with o_particulas.pv[n]
                            {
                                instance_destroy();
                            }
                            with o_particulas.pb[n]
                            {
                                instance_destroy();
                            }
                        }
                        o_particulas.pp = aux_pp;
                        o_particulas.pv = aux_pv;
                        o_particulas.pb = aux_pb;
                    }
                    
                    o_particulas.contador = 0;
                    o_particulas.entrenando = true;
                }
                break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if mouse_x &gt; x - 104 and mouse_y &gt; y - 16 and
    mouse_x &lt; x + 104 and mouse_y &lt; y + 16
{
    draw_sprite_ext(d_boton, 1, x, y, 1.1, 1.1, 0, c_white, 1);
}
else
{
    draw_sprite(d_boton, 0, x, y);
}
draw_set_valign(fa_middle);
draw_set_halign(fa_center);
draw_text_colour(x, y, "Entrenar Red",
    c_black, c_black, c_black, c_black, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
