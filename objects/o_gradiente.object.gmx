<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = 100;
enmira = -1;
entrenando = false;

instance_create(600, 40, o_entrenar);
instance_create(820, 200, o_limite);
instance_create(820, 360, o_alfa);

ini_open("patrones.ini");
    
    patrones = ini_read_real("config", "muestras", 1);
    
    px[patrones - 1, m_xin - 1] = 0;
    pd[patrones - 1, 1] = 0;
    for (var p = 0; p &lt; patrones; p++)
    {
        for (var i = 0; i &lt; m_xin; i++)
        {
            px[p, i] = ini_read_real("p" + string(p), "x" + string(i), 0);
        }
        pd[p, 0] = ini_read_real("p" + string(p), "d0", -1);
        pd[p, 1] = ini_read_real("p" + string(p), "d1", 0);
    }

ini_close();

error = -1;
viejo = -1;
contador = 0;
iteraciones = 0;

ractiva = instance_create(0, 0, o_red);
rmejor = instance_create(0, 0, o_red);
s_abre_red(rmejor);
s_igualar_redes(ractiva, rmejor);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///cerrar pagina
if keyboard_check_pressed(vk_escape)
{
    room_goto(w_menu);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///algoritmo
if entrenando
{
    var i, j, k, p, s1, s2;
    
    for (p = 0; p &lt; patrones; p++)
    {
        //pesos sinapticos capa oculta
        //m_ocult neuronas, m_xin entradas
        for (j = 0; j &lt; m_ocult; j++)
        {
            s1[j] = ractiva.w_oc[j, m_xin];
            for (i = 0; i &lt; m_xin; i++)
            {
                s1[j] += ractiva.w_oc[j, i] * px[p, i];
            }
            s1[j] = 2 / (1 + exp(-s1[j])) - 1;
        }
        
        //pesos sinapticos capa de salida
        //2 neuronas, m_ocult
        for (k = 0; k &lt; 2; k++)
        {
            s2[k] = ractiva.w_sa[k, m_ocult];
            for (j = 0; j &lt; m_ocult; j++)
            {
                s2[k] += ractiva.w_sa[k, j] * s1[j];
            }
            s2[k] = 2 / (1 + exp(-s2[k])) - 1;
        }
        
        //calcular delta del error a la salida
        for (k = 0; k &lt; 2; k++)
        {
            e2[k] = (pd[p, k] - s2[k]) * s2[k] * (1 - s2[k]) * 2;
        }
        
        //calcular delta del error a la capa oculta
        for (j = 0; j &lt; m_ocult; j++)
        {
            e1[j] = 0;
            for (k = 0; k &lt; 2; k++)
            {
                e1[j] += e2[k] * ractiva.w_sa[k, j];
            }
            e1[j] *= s1[j] * (1 - s1[j]) * 2;
        }
        
        //actualizar pesos salida
        for (k = 0; k &lt; 2; k++)
        {
            ractiva.w_sa[k, m_ocult] = clamp(ractiva.w_sa[k, m_ocult] +
                o_alfa.numerico * e2[k], -m_w, m_w);
            for (j = 0; j &lt; m_ocult; j++)
            {
                ractiva.w_sa[k, j] = clamp(ractiva.w_sa[k, j] +
                    o_alfa.numerico * e2[k] * s1[j], -m_w, m_w);
            }
        }
        
        //actualizar pesos ocultos
        for (j = 0; j &lt; m_ocult; j++)
        {
            ractiva.w_oc[j, m_xin] = clamp(ractiva.w_oc[j, m_xin] +
                o_alfa.numerico * e1[j], -m_w, m_w);
            for (i = 0; i &lt; m_xin; i++)
            {
                ractiva.w_oc[j, i] = clamp(ractiva.w_oc[j, i] +
                    o_alfa.numerico * e1[j] * px[p, i], -m_w, m_w);
            }
        }
    }
    
    s_calcula_error(ractiva, id);
    if rmejor.error &gt; ractiva.error or rmejor.error == -1
    {
        s_igualar_redes(rmejor, ractiva);
        error = rmejor.error;
    }
    
    if viejo != -1 and viejo &lt;= error
    {
        o_alfa.numerico *= o_amortigua.numerico;
        if o_alfa.numerico &lt; 0.000001
        {
            o_alfa.numerico = 0.000001
        }
        if o_alfa.numerico != 0
        {
            o_alfa.valor = s_formato_cajones(o_alfa.numerico);
        }
    }
    viejo = error;
    
    contador++;
    iteraciones++;
    
    if contador &gt;= o_limite.numerico or error &lt;= o_deseado.numerico
    {
        entrenando = false;
        audio_play_sound(a_finentreno, 5, false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ini_open("configuracion.ini");
    
    ini_write_real("gradiente", "alfa", o_alfa.numerico);
    ini_write_real("gradiente", "amortigua", o_amortigua.numerico);
    ini_write_real("config", "limite", o_limite.numerico);
    ini_write_real("config", "deseado", o_deseado.numerico);
    
ini_close();

s_guarda_red(rmejor, false, patrones);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(d_sol_luna, 2, room_width - 192, 0);

draw_set_valign(fa_middle);
draw_set_halign(fa_right);

draw_text_colour(796, 280, "N. Ocultas:",
    c_black, c_black, c_black, c_black, 1);

draw_text_colour(796, 320, "Patrones:",
    c_black, c_black, c_black, c_black, 1);

draw_set_halign(fa_left);

draw_text_colour(820, 280, string(m_ocult),
    c_black, c_black, c_black, c_black, 1);

draw_text_colour(820, 320, string(patrones),
    c_black, c_black, c_black, c_black, 1);

draw_set_valign(fa_bottom);
draw_set_halign(fa_right);

draw_text_colour(room_width - 20, room_height - 25,
    string(contador) + " :Contador",
    c_black, c_black, c_black, c_black, 1);

draw_text_colour(room_width - 20, room_height - 65,
    string(iteraciones) + " :Iteraciones",
    c_black, c_black, c_black, c_black, 1);

draw_text_colour(room_width - 20, room_height - 105,
    s_formato_cajones(error) + " :Error",
    c_black, c_black, c_black, c_black, 1);

draw_text_colour(room_width - 20, room_height - 145,
    s_formato_cajones(ractiva.error) + " :E Actual",
    c_black, c_black, c_black, c_black, 1);

draw_rectangle_colour(room_width - 516, room_height - 20,
    room_width - 4, room_height - 4,
    c_green, c_green, c_green, c_green, false);

draw_rectangle_colour(room_width - 516 + contador * (512 / o_limite.numerico),
    room_height - 20, room_width - 4, room_height - 4,
    c_lime, c_lime, c_lime, c_lime, false);

draw_rectangle_colour(room_width - 516, room_height - 20,
    room_width - 4, room_height - 4,
    c_black, c_black, c_black, c_black, true);

draw_sprite(d_mouse, 0, mouse_x, mouse_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
